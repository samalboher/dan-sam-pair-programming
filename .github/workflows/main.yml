name: dan-sam
on:
  push:
    branches: ["main"]
jobs:
  build_image:
    name: build docker
    runs-on: ubuntu-latest
    steps:
      - name: checkout
        uses: actions/checkout@v4
      - name: loginaws
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{secrets.AWSACESSKEY}}
          aws-secret-access-key: ${{secrets.AWSSECRETKEY}}
          aws-region: ${{vars.AWSREGION}}
      - name: loginecr
        uses: aws-actions/amazon-ecr-login@v2
        id: loginecr
      - name: build & push
        env:
          ecrregistry: ${{steps.loginecr.outputs.registry}}
          ecrrepository: ${{secrets.ECRREPO}}
        run: |
          docker build -t $ecrregistry/$ecrrepository:latest ./
          docker push $ecrregistry/$ecrrepository:latest
  deployimage:
    name: ec2runner
    runs-on: ubuntu-latest
    needs: build_image
    steps:
      - name: checkout
        uses: actions/checkout@v4
      - name: loginaws
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{secrets.AWSACESSKEY}}
          aws-secret-access-key: ${{secrets.AWSSECRETKEY}}
          aws-region: ${{vars.AWSREGION}}
      - name: loginecr
        uses: aws-actions/amazon-ecr-login@v2
        id: loginecr
      - name: deploy2ec2
        run: |
         aws ssm send-command \
          --instance-ids ${{vars.INSTANCEID}} \
          --document-name "AWS-RunShellScript" \
          --parameters 'commands=[
            "aws ecr get-login-password --region ${{vars.AWSREGION}} | docker login --username AWS --password-stdin ${{steps.loginecr.outputs.registry}}",
            "docker pull ${{steps.loginecr.outputs.registry}}/${{secrets.ECRREPO}}:latest"
          ]'
